<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Withdraw Sign (EIP-712)</title>
  <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.min.js"></script>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <style>body{font-family:system-ui;padding:14px;}button{padding:10px 14px;margin:8px 0;}pre{background:#f6f6f6;padding:10px;border-radius:6px;white-space:pre-wrap}</style>
</head>
<body>
  <h2>Withdraw Signature (EIP‑712)</h2>
  <p>ابتدا Connect کنید، سپس پارامترها را تنظیم و Sign بزنید. (تست‌نت پیشنهاد می‌شود)</p>

  <label>Contract (verifyingContract):<br><input id="contract" value="0xCONTRACT_ADDRESS_HERE" style="width:100%"></label>
  <label>Chain ID (مثال: 11155111 = Sepolia):<br><input id="chainId" value="11155111" style="width:100%"></label>
  <label>Token (0x0 برای ETH):<br><input id="token" value="0x0000000000000000000000000000000000000000" style="width:100%"></label>
  <label>Recipient (to):<br><input id="to" value="0xRECIPIENT_ADDRESS_HERE" style="width:100%"></label>
  <label>Amount (به واحد توکن؛ برای ETH مقدار را به wei وارد نکن — عدد اعشاری را تبدیل می‌کنیم):<br><input id="amount" value="0.01" style="width:100%"></label>
  <label>Decimals (توکن):<br><input id="decimals" value="18" style="width:100%"></label>
  <label>Nonce (مثلاً 1):<br><input id="nonce" value="1" style="width:100%"></label>
  <label>Deadline (ثانیه از epoch، یا leave empty تا 1 ساعت):<br><input id="deadline" placeholder="optional" style="width:100%"></label>

  <div>
    <button id="connectBtn">Connect Wallet</button>
    <button id="signBtn">Create & Sign (EIP‑712)</button>
  </div>

  <h3>Output</h3>
  <pre id="out">---</pre>

<script>
const outEl = id => document.getElementById(id);
const write = txt => outEl('out').innerText += txt + "\\n";

async function connect() {
  if (!window.ethereum) { alert('MetaMask/Wallet not found. Use MetaMask Mobile or a dapp‑capable wallet.'); return; }
  const provider = new ethers.providers.Web3Provider(window.ethereum, "any");
  await provider.send('eth_requestAccounts', []);
  const signer = provider.getSigner();
  const addr = await signer.getAddress();
  write('Connected: ' + addr);
  return { provider, signer, addr };
}

async function sign() {
  const c = document.getElementById('contract').value.trim();
  const chainId = parseInt(document.getElementById('chainId').value.trim());
  const token = document.getElementById('token').value.trim();
  const to = document.getElementById('to').value.trim();
  const amountInput = document.getElementById('amount').value.trim();
  const decimals = parseInt(document.getElementById('decimals').value.trim() || '18');
  const nonce = parseInt(document.getElementById('nonce').value.trim());
  let deadline = document.getElementById('deadline').value.trim();
  if (!deadline) { deadline = Math.floor(Date.now()/1000) + 3600; } else { deadline = parseInt(deadline); }

  write('\\n--- Preparing to sign ---');
  write('contract: ' + c);
  write('chainId: ' + chainId);
  write('token: ' + token);
  write('to: ' + to);
  write('amount (input): ' + amountInput + ' decimals:' + decimals);
  write('nonce: ' + nonce);
  write('deadline: ' + deadline + ' (' + new Date(deadline*1000).toISOString() + ')');

  const { provider, signer, addr } = await connect();

  // amount -> integer based on decimals
  const bnAmount = ethers.utils.parseUnits(amountInput, decimals).toString();

  const domain = {
    name: "WithdrawWithSig",
    version: "1",
    chainId: chainId,
    verifyingContract: c
  };

  const types = {
    Withdraw: [
      { name: "token", type: "address" },
      { name: "to", type: "address" },
      { name: "amount", type: "uint256" },
      { name: "nonce", type: "uint256" },
      { name: "deadline", type: "uint256" }
    ]
  };

  const value = {
    token: token,
    to: to,
    amount: bnAmount,
    nonce: nonce,
    deadline: deadline
  };

  write('\\nSigning EIP-712 typed data...');
  try {
    // _signTypedData will trigger wallet prompt on mobile
    const signature = await signer._signTypedData(domain, types, value);
    write('Signature: ' + signature);
    write('v,r,s:');
    const split = ethers.utils.splitSignature(signature);
    write('v: ' + split.v);
    write('r: ' + split.r);
    write('s: ' + split.s);

    // show data to copy
    write('\\nCopy these and keep safe. To execute withdraw call contract.withdrawWithSig(token,to,amount,nonce,deadline,signature).');
    write('VALUE JSON:\\n' + JSON.stringify({domain,types,value}, null, 2));
  } catch (e) {
    write('Error signing: ' + (e && e.message ? e.message : e));
  }
}

document.getElementById('connectBtn').onclick = async () => { await connect(); }
document.getElementById('signBtn').onclick = async () => { await sign(); }
</script>
</body>
</html>
